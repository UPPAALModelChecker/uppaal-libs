<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>import "/home/marius/work/UPPAAL/uppaal-libs/libtable-dbg.so" {
    int table_new_int(int rows, int cols, int value); // creates a new table and returns its id
    int table_new_double(int rows, int cols, double value); // creates a new table and returns its id
    int table_read_csv(const string&amp; filename, int skip_lines); // reads table from csv file and returns id
	int table_write_csv(int id, const string&amp; filename); // writes table to csv file and returns number of rows
    int table_copy(int id); // creates a new table copy and returns its id
    int table_clear(int id); // releases resources associated with the table and returns id
    int table_resize_int(int id, int rows, int cols, int value); // resizes the table with given dimensions
    int table_rows(int id); // number of rows in the table
    int table_cols(int id); // number of columns in the table
	int read_int(int id, int row, int col); // read integer at row:col
	double read_double(int id, int row, int col); // read double at row:col
	void write_int(int id, int row, int col, int value); // write integer at row:col
	void write_double(int id, int row, int col, double value); // write double at row:col
	void read_int_col(int id, int row, int col, int&amp; items, int offset, int count); // read column
	void read_int_row(int id, int row, int col, int&amp; items, int offset, int count); // read row
};

const int id = table_read_csv("/home/marius/work/UPPAAL/uppaal-libs/table_input.csv", 0);
//const int id = table_new_double(3, 4, 3.14);
const int rows = table_rows(id);
const int cols = table_cols(id);
const int len = table_write_csv(id, "/home/marius/work/UPPAAL/uppaal-libs/table_output.csv");

int _id = id;
int _rows = rows;
int _cols = cols;
int _len = len;

int table[rows][cols];

void read_all()
{
  if (rows&gt;0 &amp;&amp; cols&gt;0) {
     for (i : int[0,rows-1])
        for (j : int[0,cols-1])
           table[i][j] = read_int(_id, i, j);
  }
}

void read_by_row() 
{
// crash
//  for (r : int[0,rows-1])
    const int r = 0;
    read_int_row(id, r, 0, table[r][0], 0, cols);

}</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="-136" y="51">
			<urgent/>
		</location>
		<location id="id1" x="144" y="93">
		</location>
		<location id="id2" x="127" y="0">
		</location>
		<location id="id3" x="-8" y="93">
			<urgent/>
		</location>
		<location id="id4" x="-8" y="0">
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="assignment" x="8" y="93">read_by_row()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="assignment" x="18" y="0">read_all()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
    </system>
	<queries>
		<query>
			<formula>simulate 1 [&lt;=1] { id, rows, cols, len }</formula>
			<comment/>
		</query>
		<query>
			<formula>//simulate 1 [&lt;=10] {table[0][0], table[0][1], table[0,2]}</formula>
			<comment/>
		</query>
	</queries>
</nta>
